{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoincrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,Y,GAAS,CAAC,aAAD,C;AACTC,a,GAAU,C;AACVC,Y,GAAS,Y;AAEXC,gB,GAAa,I;AACbC,W,GAAQ,I;;mCAECC,iB;AAEX,qCAAc;AAAA;;AACV,gBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;0CAEsB;AACnB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEtC,kBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,0BAAYI,eAAZ,GAA8B,aAAK;AACjCT,kCAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACD,eAFD;;AAIAR,0BAAYS,SAAZ,GAAwB,aAAK;AAC3B,oBAAG,CAAChB,UAAJ,EAAgB;AACdA,+BAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,0BAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,6BAAWC,KAAX,GAAmB,YAAW;AAAE;AAC9B,0BAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACD,mBAFD;AAGD;AACDE,wBAAQL,UAAR;AACD,eATD;;AAWAO,0BAAYW,OAAZ,GAAsB,aAAK;AACzBC,wBAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uBAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACD,eAHD;AAKD,aAxBM,CAAP;AAyBD;;;wCACoBtB,U,EAAY;AAC/BH,mBAAO0B,OAAP,CAAe,iBAAS;AACtB,kBAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgD1B,WAAW2B,iBAAX,CAA6BD,KAA7B;AAChD1B,yBAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACD,aAHD;AAKD;;;4CAEwB;AACvB,gBAAG7B,UAAH,EAAe;AACbC;AACAD,2BAAa,IAAb;AACD;AACF","file":"ConnectionFactory.js","sourcesContent":["  const stores = ['negociacoes'];\n  const version = 4;\n  const dbName = 'aluraframe';\n\n  let connection = null;\n  let close = null;\n\n  export class ConnectionFactory {\n\n    constructor() {\n        throw new Error('Não é possível criar instâncias de ConnectionFactory');\n    }\n\n    static getConnection() {\n        return new Promise((resolve, reject) => {\n\n          let openRequest = window.indexedDB.open(dbName, version); \n\n          openRequest.onupgradeneeded = e => {\n            ConnectionFactory._createStores(e.target.result);\n          };\n          \n          openRequest.onsuccess = e => {\n            if(!connection) {\n              connection = e.target.result;\n              close = connection.close.bind(connection);\n              connection.close = function() { // monkey patch\n                throw new Error('Você não pode fechar diretamente a conexão');\n              };\n            }\n            resolve(connection);\n          };\n          \n          openRequest.onerror = e => {\n            console.log(e.target.error);\n            reject(e.target.error.name);\n          };\n          \n        });\n      }\n      static _createStores(connection) {\n        stores.forEach(store => {\n          if(connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n          connection.createObjectStore(store, { autoincrement: true});\n        });\n        \n      }\n\n      static closeConnection() {\n        if(connection) {\n          close();\n          connection = null;\n        }\n      }\n  }\n\n\n// getConnection vai ser um metodo estatico\n// getConnection vai retornar uma promise\n// nao importa o nº de x que eu chamar o metodo estatico a conexao tem que ser a mesma\n// o programados nao pode chamar close diretamente\n"]}